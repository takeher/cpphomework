set number
set mouse=a
set nocompatible
set hlsearch
set backspace=indent,eol,start
let mapleader=","
set autoindent
set smartindent
set showmatch
set noshowmode
set cindent
set ruler     
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set fileencoding=utf-8
set nowrap
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/vim-easy-align'
  Plug 'junegunn/seoul256.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'kien/ctrlp.vim'
  Plug 'eshion/vim-sync'
  Plug 'lervag/vimtex'
  Plug 'KeitaNakamura/tex-conceal.vim'
  Plug 'majutsushi/tagbar'
  Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
  Plug 'plasticboy/vim-markdown'
  Plug 'suan/vim-instant-markdown'
  Plug 'sirver/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'Valloric/YouCompleteMe'
  Plug 'tenfyzhong/CompleteParameter.vim'
  Plug 'dense-analysis/ale'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'fatih/vim-go'
  Plug 'skywind3000/asyncrun.vim'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'morhetz/gruvbox'
  Plug 'altercation/vim-colors-solarized'
  Plug 'liuchengxu/space-vim-theme'
  Plug 'drewtempelmeyer/palenight.vim'
call plug#end()
"asyncrun
let g:asyncrun_open = 6
nnoremap <F12> : call asyncrun#quickfix_toggle(6)<cr>
let g:asyncrun_encs = 'gb2312'
let g:tex_flavor='latex'
"let g:vimtex_view_method='mupdf'
let g:vimtex_quickfix_mode=0
set conceallevel=2
let g:vimtex_syntax_enabled=0
let g:tex_conceal='abdmg'
set completeopt=longest,menu
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_confirm_extra_conf=0
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_cache_omnifunc=0
let g:ycm_seed_identifiers_with_syntax=1
"nnoremap <F3> :YcmForceCompileAndDiagnostics<CR>
"nnoremap <leader>lo :lopen<CR>	"open locationlist
"nnoremap <leader>lc :lclose<CR>	"close locationlist
inoremap <leader><leader> <C-x><C-o>
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_filetype_whitelist={
    \"c":1,
    \"cpp":1,
    \"objc":1,
    \"sh":1,
    \"go":1,
    \"python":1,
    \"py":1,
    \"java":1,
    \"zsh":1,
    \"zimbu":1,
\}
let g:ycm_show_disgnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols={}
endif
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='powerlineish'
let g:tagbar_ctags_bin= 'ctags'
let g:tagbar_width=20
map <F8> :Tagbar<CR>
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.java call tagbar#autoopen()
map <F6> :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
let NERDTreeShowHidden=1
let NERDTreeWinSize=21
let g:nerdtree_tabs_open_on_console_startup=1
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.swo','\.swn','\.swm','\.swl']
let NERDTreeShowBookmarks=1
syntax enable
let g:solarized_termcolors=256
let g:solarized_termtrans=0
map <F2> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "AsyncRun -raw clang % -o %<"
    elseif &filetype == 'cpp'
        exec "AsyncRun -raw clang++ -std=c++11 -stdlib=libc++ % -o %<"
    elseif &filetype == 'python'
        exec "AsyncRun -raw python3 %"
    elseif &filetype == 'sh'
        :!bash %
    "elseif &filetype =='java'
    "    exec "!javac %"
    "    exec "!java %<"
    elseif &filetype =='tex'
        exec "AsyncRun -raw latexmk -pvc -pdf -silent %"
    endif
endfunc
map <F3> :call CompileRunGcc2()<CR>
func! CompileRunGcc2()
    if &filetype == 'c'
        exec "AsyncRun -raw ./%<"
    elseif &filetype == 'cpp'
        exec "AsyncRun -raw ./%<"
    endif
endfunc
map <F4> :call CompileStop()<CR>
func! CompileStop()
    exec "AsyncStop!"
endfunc

colorscheme gruvbox
"colorscheme solarized
"colorscheme palenight
hi Conceal guibg=Black guifg=White
highlight PMenu ctermfg=220  ctermbg=242 guifg=teal guibg=black
highlight PMenuSel ctermfg=50  ctermbg=8 guifg=black  guibg=teal
"ale
let g:ale_lint_on_enter = 0
let g:ale_sign_column_always = 0
let g:ale_set_highlights = 0
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_java_javac_options = '-encoding UTF-8  -J-Duser.language=en'
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
nmap <Leader>i :ALEGoToDefinition<CR>
nmap <Leader>r :ALEFindReferences<CR>
nmap <Leader>s :ALEToggle<CR>
nmap <Leader>d :ALEDetail<CR>
let g:ale_linters = {
\   'c++': ['clang'],
\   'c': ['clang'],
\   'python': ['pylint'],
\}
"CompleteParameter
let g:complete_parameter_log_level = 5
let g:complete_parameter_use_ultisnips_mapping = 0
let g:complete_parameter_echo_signature = 1
let g:complete_parameter_py_keep_value = 1
let g:complete_parameter_py_remove_default = 1
let g:AutoPairs = {'[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
"inoremap <buffer><silent> ) <C-R>=AutoPairsInsert(')')<CR>
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
